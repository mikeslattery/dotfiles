#!/bin/sh
usage() { cat >&2 <<USAGE
Dotfile installer.

To install:
  curl -L https://raw.githubusercontent.com/mikeslattery/dotfiles/master/.local/bin/dotfiles | /bin/sh -s install
or
  wget https://raw.githubusercontent.com/mikeslattery/dotfiles/master/.local/bin/dotfiles -O - | /bin/sh -s install

An install will:
- Create a bare git repo at $GIT_DIR
- Checkout files to ~
- Backup original files to a backup-$branch-$HOSTNAME
- Configure to not show untracked files
- if git user.email isn't set up, downloads .gitconfig
- if ssh isn't set up or installed, falls back to https
- if git isn't installed, falls back to download files
- if curl isn't installed, falls back to wget

Usage:  (after install)
  config   ...        - git subcomment.  Requires alias in .zshrc
  dotfiles [help]     - This message.
  dotfiles etc        - Copy ~/.config/dotfiles/etc to /etc
  dotfiles ssh <host> - Install to ssh host
  dotfiles tar <host> - Copy to host w/o github access
  dotfiles uninstall  - Revert to config as before install.
  dotfiles ...        - git subcommand. (in case "config" alias not set)

To make your own new empty dotfiles project, based on this one.
  1. Read the requirements section.
  2. Create an github dotfiles repo, with an initial commit.
  3. Run: export DOTFILES_NAME=<github-username>/<project>
  4. Run the install command from top of this help message.

Advice:
  Never run: config add <directory>, or config commit -a -m <message>
     Instead use: config add -u [<path>...]
  "config" works best if run from home directory.

Requirements:
  for install:  git or unzip, curl or wget
  for pushes:   git, openssh, and keys registered with github
  In .zprofile: export "PATH=$HOME/.local/bin"
  In .zshrc:    alias config="git -C $HOME --git-dir=$HOME/.dotfiles --work-tree=$HOME"

Environmental override variables
  DOTFILES_NAME   - github owner/project.  It's better to change the default.
  DOTFILES_BRANCH - default is master
  DOTFILES_DIR    - default is ~/.dotfiles

See also:
  Other files in .config/dotfiles
  https://www.atlassian.com/git/tutorials/dotfiles

USAGE
}

set -eu

# if you edit this, also edit usage()
github="${DOTFILES_NAME:-mikeslattery/dotfiles}"
branch="${DOTFILES_BRANCH:-master}"
export GIT_DIR="${DOTFILES_DIR:-$HOME/.dotfiles}"

git_ssh_url="git@github.com:${github}.git"
git_http_url="https://github.com/${github}.git"
export GIT_WORK_TREE="$HOME"
HOSTNAME="${HOSTNAME:-$(hostname)}"
USER="${USER:-$(whoami)}"

die() { echo "$*"; exit 1; }

cmd="${1:-help}"
[ "$#" -eq 0 ] || shift

case "$cmd" in
  help)
    usage
    ;;
  curl)
    # for copy-paste
    echo "curl -L https://raw.githubusercontent.com/${github}/${branch}/.local/bin/dotfiles | /bin/sh -s install"
    ;;
  wget)
    echo "wget https://raw.githubusercontent.com/${github}/${branch}/.local/bin/dotfiles -O - | /bin/sh -s install"
    ;;
  install)
    if ! command -v git >/dev/null; then
      # fallback to unzip, if git not installed
      command -v unzip >/dev/null || die 'E: git nor unzip are installed'
      cd ~
      zip="https://github.com/${github}/archive/refs/heads/${branch}.zip"
      curl -sfLO "$zip" || wget -q "$zip"
      ln -sfn ~ "dotfiles-${branch}"
      unzip -o "${branch}.zip"
      rm "${branch}.zip" "dotfiles-${branch}"

      echo 'W: git is not installed.'
    else
      [ ! -d "$GIT_DIR" ] || die "E: $GIT_DIR already exists."
      # If git user not set, download config
      if ! git config user.name 2>/dev/null; then
        gitconfig="https://raw.githubusercontent.com/${github}/${branch}/.gitconfig"
        curl -sSLf "$gitconfig" -o ~/.gitconfig || \
          wget "$gitconfig" -O ~/.gitconfig -q || \
          git config --global --edit
      fi
      mkdir -p "$(dirname "$GIT_DIR")"
      (
        set -x
        git clone   --bare --branch "$branch" "$git_ssh_url"  "$GIT_DIR" || \
          git clone --bare --branch "$branch" "$git_http_url" "$GIT_DIR"
        git config --local status.showUntrackedFiles no
        git config --local core.excludesFile ~/.config/dotfiles/gitignore
        git config --local "branch.${branch}.remote" "origin"
        git config --local "branch.${branch}.merge" "refs/heads/${branch}"
        git reset
        git checkout -b "backup-${branch}-$HOSTNAME"
        git add -u
        git commit -m "backup of $HOSTNAME for $USER"
        git checkout -
      )
      # in case someone else is using this
      sed -i "s|mikeslattery/dotfiles|$github|" "$HOME/.local/bin/dotfiles"

      ls -la ~
      git status -b -s
      echo 'Run this: . ~/.zshrc, or: zsh'
    fi
    ;;
  uninstall)
    cd ~
    git diff-index --quiet HEAD || die 'E: Uncommitted changes'
    set -x

    git checkout "backup-$branch-$HOSTNAME"
    rm -rf "$GIT_DIR" ~/.config/dotfiles
    ;;
  etc)
    sudo cp -rv --preserve=mode ~/.config/dotfiles/etc/* /etc/ \
      || die 'E: coreutils not installed?'
    ;;
  ssh)
    set -x
    ssh "$@" /bin/sh -s install < "$0"
    ;;
  tar)
    set -x
    git -C ~ archive "${branch}" | ssh "$@" tar -x
    ssh "$@" ls -la
    ;;
  *)
    exec git -C "$HOME" "$cmd" "$@"
    ;;
esac

