#!/bin/bash

set -euo pipefail

_usage() {
  echo "Usage: $0 <subcommand>"
  echo ''
  echo 'Subcommands:'
  sed -nr 's/^([a-z][a-zA-Z0-9_-]*)\(.*/\1/p' < "$0"
}

_main() {
  if [[ "$#" == "0" ]]; then
    _usage
  else
    "$@"
  fi
}

# Production monitoring

# TODO: aggregate total charges today.  count, amount, earliest, latest
charges() {
  stripe charges list --live | \
    jq '.data[]
      | select(.payment_method_details.card.last4 != "4242")
      | [(.created | strftime("%m-%d %H:%M")), (.amount / 100.00), .status]
      | @tsv' -r | \
      sed 's/^/charge  /'
  stripe disputes list --live | \
    jq '.data[]
      | select(.payment_method_details.card.last4 != "4242")
      | [(.created | strftime("%m-%d %H:%M")), (.amount / 100.00), .status]
      | @tsv' -r | \
    sed 's/^/dispute /'
}

#TODO: incomplete
# https://www.maxivanov.io/make-graphql-requests-with-curl/
newusers() {
  #shellcheck disable=SC1090
  source ~/src/nuxt/newstart2/.env.prod
  local query="donation {amount city}"
  local variables="null"

  #shellcheck disable=SC2154
  curl -fsS https://data.communityrisingscholarships.org/v1/graphql \
    -H "X-HASURA-ADMIN-SECRET: $HASURA_GRAPHQL_ADMIN_SECRET" \
    -H 'Content-Type: application/json' \
    --data "{
      'query':'query MyQuery { ${query}',
      'variables': ${variables},
      'operationName':'MyQuery'}" | \
    jq '.data.donation[] | [.amount, .city] | @tsv' -r
}

health() {
  echo "Nety: $(curl -fsS   https://www.netlifystatus.com/api/v2/status.json | jq .status.description -r || echo ERROR)"
  echo "Pay:  $(curl -fsS https://status.stripe.com/current/full | jq .message -r || echo ERROR)"
  echo "Mail: $(curl -fsS https://3tgl2vf85cht.statuspage.io/api/v2/status.json | jq .status.description -r || echo ERROR)"

  echo "GQL:  $(curl -fsS https://data.communityrisingscholarships.org/healthz || echo ERROR)"
  # TODO: full run: auth as a user, graphql query, fetch CDN file
  echo "Func: $(curl -fsS https://communityrisingscholarships.org/.netlify/functions/health || echo ERROR)"
  echo "Auth: $(curl -fsS https://communityrisingscholarships.org/.netlify/identity/health &>/dev/null && echo OK || echo ERROR)"
}

_highlight() {
  search="$1"
  color="${2:-31}"
  sed -r "s/(${search})/\x1b[${color}m\1\x1b[0m/g"
}

# Development and CI/CD

bs() {
  echo 'bs'
}

_rawbuilds() {
  netlify api listSiteDeploys \
     -d '{"site_id": "communityrisingscholarships.org", "page": 1, "per_page": 3}' \
    | jq  '.[] | [.state, .status_message, .published_at, .title] | @tsv' -r \
    | sed -r 's/202[1-9]-([0-9\-]+)T/\1 /; s/\....Z//; s/\t/   /g' \
    | _highlight error \
    | tee /tmp/builds.txt \
    | sed -r '$ { s/^.*\t/updated\t/; };'
}

builds() {
  timeoutmin=5

  now="$(date +%s)"
  # last push
  gptime="$(git --no-pager -C ~/src/nuxt/newstart2 log -1 --format=%at origin/master 2>/dev/null)"
  gpsubj="$(git --no-pager -C ~/src/nuxt/newstart2 log -1 --format=%s  origin/master 2>/dev/null)"
  # last deploy check
  ftime="$(stat /tmp/builds.txt --format=%Y 2>/dev/null || echo 0)"
  thmin="$(( 60 * "$timeoutmin" ))"

  echo "pushed     $(date -d "@$gptime" '+%m-%d %H:%M:%S' --utc)   ${gpsubj}"
  # if push in last $timeoutmin minutes, or no updates in last $timeoutmin minutes
  if  [[ $(( "$now" - "$gptime" )) -le "$thmin" ]] || \
      [[ $(( "$now" - "$ftime"  )) -ge "$thmin" ]]; then
    netlify api listSiteDeploys \
       -d '{"site_id": "communityrisingscholarships.org", "page": 1, "per_page": 3}' \
      | jq  '.[] | [.state, .status_message, .published_at, .title] | @tsv' -r \
      | sed -r 's/202[1-9]-([0-9\-]+)T/\1 /; s/\....Z//; s/\t/   /g' \
      | _highlight error \
      | tee /tmp/builds.txt \
      | sed -r '$ { s/^.*\t/updated\t/; };'
      # | sed -r 's/202[1-9]-([0-9\-]+)T/\1 /; s/:[0-9][0-9]\....Z//; s/\t/   /g' \
  else
    cat /tmp/builds.txt
  fi
}

feedback() {
  netlify api listFormSubmissions -d \
    '{"site_id": "communityrisingscholarships.org", "form_id": "639ce56f78dbff0008f52bdc",
     "page": 1, "per_page": 9}' | \
       jq '.[] | [(.created_at), .data.category] | @tsv' -r | \
       sed -r 's/^202.-(..-..)T(..:..):......Z/\1 \2/'
}

gss() {
  git -C ~/src/nuxt/newstart2 status -sb --show-stash | head -20 #| sed -r '0,/^(\?\? )/s//\n\1/'
  # Also can add: --ignored
  echo ''
  git -C ~/src/nuxt/newstart2 log --oneline origin/master..HEAD -20
  echo ''
  git -C ~/src/nuxt/newstart2 stash list -4
}

servers() {
  {
  docker ps --format='{{.Names}}, {{.Ports}}' | \
    sed -r '
      s|^hasura_||; s|_1,|,|;
      s|, 0.0.0.0:[^ ]*/tcp||g;
      s|, [^ ]*\b([0-9][0-9]*)/tcp|, \1|g;
      s/,//; s/, /,/g;
      s/ *$//;
    ' | \
    sort

  echo '--- ----'

  # netstat must be in your suders:
  # %wheel	ALL=(ALL)	NOPASSWD: /usr/bin/netstat *
  sudo netstat -4ltnp 2>/dev/null | \
    sed -rn '
      /docker-prox/ d;
      /:(53|5355|631) /d;
      s|^.* [0-9\.]+:([0-9]+) [^/]*/([^ :]*).*$|\2 \1|p;' | \
    sort
  } | \
    column -t
}

# Local environment

todos() {
  rg '^ +\* \[[- ]\]' ~/src/ven/doc/.todo.md -m 3 | sed -r 's/^ +\* \[(.)\]/\1/'
}

start-pomodoro() {
  mkdir -p ~/.local/state
  date +%s > ~/.local/state/pomodoro
}

pomodoro() {
  date -d "0 + $(( $(date +%s) - $(cat ~/.local/state/pomodoro) )) seconds" "+%-H  %M:%S"
}

# rm-timer <name>
rm-timer() {
  local name="${1}"

  timer="$HOME/.local/state/timers/$name"
  rm "$timer"
}

rm-timers() {
  rm -f ~/.local/state/timers/*
}

# set-timer <name> [resume|pause]
set-timer() {(
  local name="${1:-default}"
  local astate="${2:-resume}"

  timer="$HOME/.local/state/timers/$name"
  mkdir -p "$(dirname "$timer")"
  
  if [[ -f "$timer" ]]; then
    #shellcheck disable=SC1090
    source "$timer"
  else
    # creation of timer
    accumulated=0
    state=pause
  fi

  if [[ "$state" == "$astate" ]]; then
    return 0
  fi

  if [[ "$astate" == "pause" ]]; then
    accumulated=$(( "$accumulated" + "$(date +%s)" - "${laststart}" ))
  else # resume
    laststart="$(date +%s)"
  fi

  cat > "$timer" <<TIMER
accumulated=$accumulated
laststart=$laststart
state=${astate}
TIMER
)}

start-timer() {
  local aname="$1"

  local timer
  for timer in $(find ~/.local/state/timers -type f); do
    local name="$(basename "$timer")"
    if [[ "$name" != "$aname" ]]; then
      set-timer "$name" pause
    fi
  done

  set-timer "$aname" resume
}

timers() {
  echo -n $'pomo\t'; pomodoro
  echo ''
  local timer
  #shellcheck disable=SC2044
  for timer in $(find ~/.local/state/timers -type f); do (
    #shellcheck disable=SC1090
    source "$timer"

    if [[ "${state}" == "pause" ]]; then
      laststart="$(date +%s)"
    fi

    echo -en "$(basename "${timer}")\t"
    #shellcheck disable=SC2031
    date -d "0 + $(( "${accumulated}" + "$(date +%s)" - "${laststart}" )) seconds" "+%H:%M:%S"
  ); done
}

processes() {
  LINES=12 top -bn1 | sed '/ top$/d; / jq$/d; / wtfutil$/d;' | sed -n '7,10p' | cut -c51-
}

tmux() {
  #TODO: turn red if CPU is high, or pomodoro is almost due
  #TODO: cpu="$(LINES=12 top -bn1 -w | sed -r '1,/PID/d; / wtfutil$/d; s/^.{51}(.{10}).{10}/\1/; ' | head -1)"
  #In hawaii, EST time: | $(date +%T --date='now + 5 hours')
  echo -n "$(cat /tmp/jest.txt) | $(pomodoro default) | $(date +%T)"
}

# Personal

weather() {
  curl -sf 'https://wttr.in/Indianapolis?u&format=2'
}

recycling() {
  # Every other friday morning is recycling
  [[ "$(( $(date -d "+5 days" +%s) / 3600 / 24 / 7 % 2 ))" == 1 ]] && echo "Recycling" || echo "Trash"
}

personal() {
  weather
  recycling
}


_main "$@"


# args: ["/home/mike/bin/notifies"]

# HIGH PRIORITY
# use
#   health
# add
#   new user
#     possible sources: logs, graphql
#   latest unique onsite errors
#     bin/util prod compose-logs -f --tail=0 | grep -Ei error
#     try this: console.log('error') or something else and filter on it
#     bin/util prod compose-logs --no-color -f --tail=0 | \
#       grep -i 'error' | \
#       sed 's/"http_error":null//; /error/ !d;' | \
#       rg -v '(handshake|"status":404|caddy.*reset|11/27|code=|moore|FeedBaxley|m2slattery' | \
#       rg -v '(8373|hook unauth|confirmation_token|isDark|error page.*object Object|validate-user.*401)' | \
#       sed -r 's/\\n/\n/g; s/\\t/\t/g' | \
#       perl -e 'use Digest::MD5 qw(md5);
#         while(<>) { if(/error/i) { print $_ if !$h{md5($_)}; $h{md5($_)}=1;  } }'
#   full stack health endpoint smoke test
#     gotrue, gql, s3, sendgrid
# fix
#   todos
# alerts
#   bug feedback, novel error log, dispute, health check failure


# MEDIUM
# my next calendar events
# fix todos
# weather and recycling together
# health of all systems.  Just report issues
# processes and resource usage together
# reddit responses

# MEDIUM-LOW

# Bus
#    https://realtime.indygo.net/InfoPoint/
#    https://realtime.indygo.net/InfoPoint/Stops/Stop/11595
#    https://realtime.indygo.net/InfoPoint/Stops/Stop/11814
# gitlab: my PRs, their PRs, todo list
# github notifications
# reddit notifications
#    https://stackoverflow.com/questions/28955541/how-to-get-access-token-reddit-api
#    https://www.reddit.com/r/redditdev/comments/k1lo76/how_to_make_simple_submit_post_to_reddit_api/
#    https://stackoverflow.com/questions/41840497/how-to-gain-reddit-api-access-token
#    https://www.reddit.com/r/redditdev/comments/qgr0np/installed_app_with_access_token_always_receive/
#    https://www.reddit.com/r/redditdev/comments/lj4ha2/oauth2_how_to_get_an_auth_code_for_subsequent/
#    ~/.config/tuir/tuir.cfg - client id and secret
#    "POST /api/v1/access_token/ HTTP/1.1" 200 266
#    "GET /message/unread/.json?limit=1024 HTTP/1.1" 200 122
# pomodoro scripts: start, pause, stop, alarms
# unit test status
# next priority item:
#    refund, downage, high server resource usage,
#    calendar appointment warning,
#    periodic (lunch, end of day, stand-up), 
#    new onsite error, user complaint,
#    failed build, failed unit test,
#    pomodoro 5 minute warning,
#    build success, unit test success (after failure),
#    important email,
#    my PR reviewed, my PR stale, new PR to review
#    email, github notification, reddit notification


# LOW

# servers()
#   netstat -ltn4 | sed -rn '/:(53|5355|631) /d; s/^.* ([0-9\.]+:[0-9]+) .*$/\1/p'
# bat .todo.md --color=always --style=plain --line-range=:10
# uptime | sed 's/^.*: //'
# inxi ... # current cpu temp
#
# Done:
# pretty weather
# resource usage
# pomodoro (cheap)
# clocks
# notifications
# builds
# processes
# recycling
#
# Existing:
# google calendar
# DigitalOcean droplets info
# gitlab: open PRs, merge PRs
# have i been pwned
#
# Unwritten:
# rss status feeds: status.gitlab.com, www.netlifystatus.com, status.digitalocean.com
# notifications in go
# tmux current pane git status
# health: hasura /healthz, id site/.netlify/identity/health
# load factor for droplets  (ssh + uptime)
# cpu,io % of DO managed db
# netlify identity logs
# check services running: list down sites in red .wrong: xargs -r -n1 -d$'\n' < sites.txt | bash -c -- 'curl -fsS "$1" | grep -sq || echo "$1 down"'
# top -bn1 ... only show CPU%, SMEM%, Process name.  top 2 processes but not "top"
# slack channels: 1on1, linux
# gitlab CI failures
# latest emails from gmail
# latest emails from owa
# next 2 calendar events from all calendars.  Red if next 15 min.  OWA, Gmail personal + business
# stale gitlab PRs
# gitlab tickets: open + mine, (recently) closed
# DigitalOcean droplets' stats. CPU, free disk, mem use, load
# error logs
# payments: netlify, digitalocean
# Multiple merged, sorted sub-reddits:  hasura, nuxt, vuejs, graphql, linux
# curl -Lfs 'https://www.reddit.com/r/Hasura/new.json?limit=3' -H 'User-Agent: Mozilla/5.0' | jq '.data.children[].data | {created: .created, title: .title}'
#
# Possible?:
# git log most recent commits over all branches, but not mine
# new service tickets
#
# Integrations
# https://gsuite.google.com/marketplace/app/jitsi_meet_for_google_calendar/421935948107
# https://support.zoom.us/hc/en-us/articles/360020187492-Zoom-for-GSuite-add-on
# Forward invites from OWA to google
# Forward emails from Roland, Joe, Ben to gmail
# Hacker UI: https://github.com/GitSquared/edex-ui
# Netlify status

# Slack
# https://api.slack.com/apps?new_app=1
# https://api.slack.com/methods/conversations.history
# channels:read, channels:history, chat:write, im:history
# lilly_android G013AHCA022
# linux CFRGGN11B
# joe   D016D4P8FDM
# ben D011NQNG15F
# me D1KKJDZMY
# ss G91M8GX24
# miso C1XGVAXHB
# | jq '.messages[] | {ts: .ts, text:.text}' --raw-output
#
# TODOs
# rg --no-heading --no-line-number --no-filename --fixed-strings '* [ ] ' ~/src/ven/doc/{.todo,meeting}.md | sed -n 's/^ *[\*\-] \[ \] //p'
#
#
# Notifications
# dbus-monitor "interface='org.freedesktop.Notifications'" | sed -nr 's/^   string "([^"]+)"/\1/p'
# https://play.google.com/store/apps/details?id=kiwi.root.an2linuxclient&hl=en_US&gl=US

#    feedreader:
#      enabled: true
#      feeds:
#        #      - http://wtfutil.com/blog/index.xml
#      feedLimit: 10
#      position:
#        top: 1
#        left: 1
#        width: 2
#        height: 1
#      updateInterval: 14400
# await fetch("wss://socketeer.services.netlify.com/function/logs", {
#     "credentials": "include",
#     "headers": {
#         "User-Agent": "Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0",
#         "Accept": "*/*",
#         "Accept-Language": "en-US,en;q=0.5",
#         "Sec-WebSocket-Version": "13",
#         "Sec-WebSocket-Extensions": "permessage-deflate",
#         "Sec-WebSocket-Key": "aao4u7RXQY9+qsR+OzkcRg==",
#         "Pragma": "no-cache",
#         "Cache-Control": "no-cache"
#     },
#     "method": "GET",
#     "mode": "cors"
# });
# wscat -c 'wss://socketeer.services.netlify.com/function/logs' -H 'User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:86.0) Gecko/20100101 Firefox/86.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' -H 'Sec-WebSocket-Version: 13' -H 'Origin: https://app.netlify.com' -H 'Sec-WebSocket-Extensions: permessage-deflate' -H 'Connection: keep-alive, Upgrade' -H 'Cookie: _ga=GA1.2.413200287.1607543149' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache' -H 'Upgrade: websocket' --no-check
